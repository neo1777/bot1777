>>> ./main.dart
import 'package:flutter/material.dart';
import 'package:bot1777/app.dart';
//import 'package:bot1777/models/store_model.dart';

void main() async {
  //await storeModel.value.initialize();

  runApp(const App());
}>>> ./components/coin_list_tile.dart
// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:auto_size_text/auto_size_text.dart';
import 'package:binance_spot/binance_spot.dart';
import 'package:bot1777/models/balance_model.dart';
import 'package:flutter/material.dart';

import 'package:bot1777/models/coin_model.dart';
import 'package:get/get.dart';

class CoinListTile extends StatelessWidget {
  final CoinModel coinBalance;
  const CoinListTile({
    Key? key,
    required this.coinBalance,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    print('CoinListTile');

    return Container(
      decoration: BoxDecoration(
        color: Colors.grey.shade900,
        borderRadius: BorderRadius.circular(4),
        border: Border.all(
          color: Colors.grey.shade800,
        ),
      ),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: [
            Text(
              '${coinBalance.symbol}',
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey.shade400,
                fontWeight: FontWeight.w500,
              ),
            ),
            AutoSizeText(
              '${coinBalance.qty}',
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
            RealTimePrice(
              coinBalance: coinBalance,
            ),
          ],
        ),
      ),
    );
  }
}

class RealTimePrice extends StatelessWidget {
  final CoinModel coinBalance;

  const RealTimePrice({
    super.key,
    required this.coinBalance,
  });

  @override
  Widget build(BuildContext context) {
    double price = 0;
    double priceOld = 0;
    String simbolo = '';
    Color color = Colors.white;
    return Obx(() {
      if (streamModel.value.ticker != null &&
          streamModel.value.ticker!.symbol.startsWith(coinBalance.symbol)) {
        simbolo = streamModel.value.ticker!.symbol;
        priceOld = streamModel.value.ticker!.priceChange;
        price = streamModel.value.ticker!
            .prichePercentChange; //(streamModel.value.ticker!.bestBid * coinBalance.qty);
        // if (price > priceOld) {
        //   color = Colors.green;
        //   priceOld = price;
        // } else {
        //   color = Colors.red;
        //   priceOld = price;
        // }
      }
      return Column(
        children: [
          AutoSizeText(
            '${simbolo}',
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          AutoSizeText(
            '${priceOld.toStringAsFixed(3)} - ${price.toStringAsFixed(3)}',
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      );
    });
  }
}
>>> ./components/mini_menu.dart
import 'package:bot1777/pages/home_page.dart';
import 'package:bot1777/pages/option_page.dart';
import 'package:flutter/material.dart';

class MiniMenu extends StatelessWidget {
  const MiniMenu({
    super.key,
    required this.context,
  });

  final BuildContext context;

  @override
  Widget build(BuildContext context) {
    return Expanded(
      flex: 1,
      child: Container(
        padding: EdgeInsets.all(1),
        decoration: BoxDecoration(
          color: Colors.grey.shade900,
          borderRadius: BorderRadius.circular(4),
          border: Border.all(
            color: Colors.grey.shade800,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            FittedBox(
              child: IconButton(
                alignment: Alignment.center,
                onPressed: () => Navigator.pushNamed(context, HomePage.route),
                icon: Icon(Icons.home),
                iconSize: 24,
                visualDensity: VisualDensity.compact,
              ),
            ),
            FittedBox(
              child: IconButton(
                onPressed: () {},
                icon: Icon(Icons.precision_manufacturing_outlined),
                iconSize: 24,
                visualDensity: VisualDensity.compact,
              ),
            ),
            FittedBox(
              child: IconButton(
                onPressed: () => Navigator.pushNamed(context, OptionPage.route),
                icon: Icon(Icons.settings),
                iconSize: 24,
                visualDensity: VisualDensity.compact,
              ),
            ),
            SizedBox(
              width: 16,
            ),
            FittedBox(
              child: IconButton(
                onPressed: () {},
                icon: Icon(Icons.density_medium_outlined),
                iconSize: 24,
                visualDensity: VisualDensity.compact,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
>>> ./app.dart
import 'package:bot1777/models/balance_model.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import 'package:bot1777/pages/home_page.dart';
import 'package:bot1777/pages/option_page.dart';

class App extends StatelessWidget {
  const App({super.key});

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      onInit: () async {
        await balanceModel.value.initialize();
      },
      theme: ThemeData.dark(useMaterial3: true),
      initialRoute: HomePage.route,
      onGenerateRoute: ((settings) {
        final pageBuilder = {
          HomePage.route: ((_) => const HomePage()),
          OptionPage.route: ((_) => const OptionPage()),
        }[settings.name];
        return MaterialPageRoute(builder: pageBuilder!);
      }),
    );
  }
}
>>> ./pages/option_page.dart
import 'package:bot1777/models/coin_model.dart';
import 'package:flutter/material.dart';
import 'package:bot1777/models/balance_model.dart';
import 'package:get/get.dart';
import 'package:bot1777/components/coin_list_tile.dart';
import 'package:bot1777/components/mini_menu.dart';
import 'package:settings_ui/settings_ui.dart';

class OptionPage extends StatefulWidget {
  static const route = '/option';

  const OptionPage({Key? key}) : super(key: key);

  @override
  OptionPageState createState() => OptionPageState();
}

class OptionPageState extends State<OptionPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: body(),
    );
  }

  Widget body() {
    return Column(
      children: [
        Expanded(
          flex: 30,
          child: SettingsList(
            platform: DevicePlatform.linux,
            sections: [
              SettingsSection(
                title: Text('Common'),
                tiles: <SettingsTile>[
                  SettingsTile.navigation(
                    leading: Icon(Icons.language),
                    title: Text('Language'),
                    value: Text('English'),
                  ),
                  SettingsTile.switchTile(
                    onToggle: (value) {
                      setState(() {});
                    },
                    onPressed: (context) {
                      //print(value);
                    },
                    initialValue: true,
                    leading: Icon(Icons.format_paint),
                    title: Text('Enable custom theme'),
                  ),
                ],
              ),
            ],
          ),
        ),
        Spacer(),
        MiniMenu(context: context),
        SizedBox(
          height: 16,
        ),
      ],
    );
  }

  @override
  void dispose() {
    //storeModel.value.stream.cancel();
    super.dispose();
  }
}
>>> ./pages/home_page.dart
import 'package:bot1777/components/mini_menu.dart';
import 'package:bot1777/models/coin_model.dart';
import 'package:flutter/material.dart';
import 'package:bot1777/models/balance_model.dart';
import 'package:get/get.dart';
import 'package:bot1777/components/coin_list_tile.dart';

class HomePage extends StatefulWidget {
  static const route = '/';

  const HomePage({Key? key}) : super(key: key);

  @override
  HomePageState createState() => HomePageState();
}

class HomePageState extends State<HomePage> {
  List<CoinModel> coins = [];

  @override
  initState() {
    balanceModel.value.getBalance();
    //balanceModel.value.getSymbolUser();
    //balanceModel.value.getUpdateUser();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: body(),
    );
  }

  Widget body() {
    return Obx(() {
      print('GridView obx');
      var coins = balanceModel.value.coins;

      return Column(
        children: [
          Expanded(
            flex: 30,
            child: GridView.builder(
              shrinkWrap: false,
              padding: const EdgeInsets.fromLTRB(32, 24, 32, 32),
              gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(
                maxCrossAxisExtent: 250,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: coins.length,
              itemBuilder: (context, index) {
                return CoinListTile(
                  coinBalance: coins[index],
                );
              },
            ),
          ),
          Spacer(),
          MiniMenu(context: context),
          SizedBox(
            height: 16,
          ),
        ],
      );
    });
  }

  @override
  void dispose() {
    //storeModel.value.stream.cancel();
    super.dispose();
  }
}
>>> ./repositories/binance_repository.dart
/*import 'package:binance_spot/binance_spot.dart';
import 'package:bot1777/models/coin_model.dart';
import 'package:either_dart/either.dart';

class BinanceRepository {
  late BinanceSpot binanceSpot;

  Future all() async {
    String key =
        "ge0S2hecH7MGo2GNuRcyIeuFXKoaG0ISZBFhnfHkKoetNkLYQVfRVXePMIHR32hR";
    String secret =
        "4h0nLzS95XLl8Ab3ly5auHeVEaNlGi8PpfpdcmgDA1aLgTaurp8JbMNSS8LWnuSe";

    binanceSpot = BinanceSpot(key: key, secret: secret);
  }

  Future<List<CoinModel>> getBalance() async {
    Either<String, AccountInfo> response =
        await binanceSpot.accountInformation();
    List<CoinModel> cassa = [];
    if (response.isRight) {
      for (var element in response.right.balances) {
        if (element.free > 0.0) {
          var value = null;
          cassa.add(CoinModel(
            symbol: element.asset,
            qty: element.free,

            // priceAsk: value == null ? 0 : value.bestAsk,
            // priceBid: value == null ? 0 : value.bestBid,
          ));
        }
      }
      //return response.right;
    } else {
      print('ERROR: ${response.left}');
    }
    return cassa;
  }

  Future<List<Symbol>> _getTradablePairs() async {
    List<Symbol> tradablePairs = [];

    var response = await binanceSpot.exchangeInfo();
    if (response.isRight) {
      tradablePairs = response.right.symbols;
    }
    return tradablePairs;
  }
}
*/

import 'package:binance_spot/binance_spot.dart';
import 'package:bot1777/models/coin_model.dart';
import 'package:either_dart/either.dart';

class BinanceRepository {
  late final BinanceSpot binanceSpot;

  Future<void> initialize() async {
    const apiKey =
        "ge0S2hecH7MGo2GNuRcyIeuFXKoaG0ISZBFhnfHkKoetNkLYQVfRVXePMIHR32hR";
    const apiSecret =
        "4h0nLzS95XLl8Ab3ly5auHeVEaNlGi8PpfpdcmgDA1aLgTaurp8JbMNSS8LWnuSe";

    binanceSpot = BinanceSpot(key: apiKey, secret: apiSecret);
  }

  Future<List<CoinModel>> getCoinList() async {
    final response = await binanceSpot.accountInformation();
    final coinList = <CoinModel>[];

    if (response.isRight) {
      for (final element in response.right.balances) {
        if (element.free > 0.0) {
          coinList.add(CoinModel(
            symbol: element.asset,
            qty: element.free,
          ));
        }
      }
    } else {
      throw Exception('Error getting account information: ${response.left}');
    }

    return coinList;
  }

  Future<Stream> getUserDataStream() async {
    String listenKey = '';
    final keyresult = await binanceSpot.createListenKey();
    if (keyresult.isRight) {
      listenKey = keyresult.right;
    } else {
      print('key KO: ${keyresult.left}');
    }
    final response = binanceSpot.userDataStream(listenKey: listenKey);

    return response;
  }

  Future<Stream<WsTicker>> getTickerStream(String symbol) async {
    final Stream<WsTicker> response = binanceSpot.tickerStream(symbol: symbol);
    return response;
  }
}
>>> ./models/balance_model.dart
import 'package:binance_spot/binance_spot.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:bot1777/repositories/binance_repository.dart';
import 'package:bot1777/models/coin_model.dart';

final balanceModel = BalanceModel().obs;
final streamModel = StreamModel().obs;

class BalanceModel {
  List<CoinModel> coins = [];

  BinanceRepository binanceRepository = BinanceRepository();

  Future<void> initialize() async {
    await binanceRepository.initialize();
  }

  Future<void> getBalance() async {
    print('getBalance');
    coins = await binanceRepository.getCoinList();
    for (var element in coins) {
      streamModel.value.getSymbolUser(element.symbol);
    }

    balanceModel.refresh();
  }

  Future<void> getUpdateUser() async {
    print('getUpdateUser');
    final stream = await binanceRepository.getUserDataStream();
    stream.listen((event) {
      print(event.runtimeType);
      balanceModel.refresh();
    });
  }
}

class StreamModel {
  WsTicker? ticker;

  Future<void> getSymbolUser(String symbol) async {
    print('getSymbolUser');
    // for (var element in coins) {
    //   await Future.delayed(const Duration(seconds: 1));
    //   print(element.symbol);
    //   stream = await binanceRepository.getTickerStream('${element.symbol}usdt');
    // }
    await Future.delayed(const Duration(seconds: 1));
    var stream = await balanceModel.value.binanceRepository
        .getTickerStream('${symbol}usdt');
    stream.listen((WsTicker event) {
      ticker = event;
      //print(ticker!.symbol);
      streamModel.refresh();
    });
  }

  bool hasPurchased = false;
  double purchaseQuantity = 0;

  void _simulateTrade(WsTicker ticker) {
    if (!hasPurchased && ticker.prichePercentChange <= -1) {
      double purchasePrice = ticker.bestAsk;
      double purchaseAmount = 10;
      purchaseQuantity = purchaseAmount / purchasePrice;
      hasPurchased = true;
    }

    if (hasPurchased) {
      double salePrice = ticker.bestBid;
      double saleAmount = purchaseQuantity * salePrice;
      double profit = saleAmount - 10;

      if (profit >= 1) {
        print(
            "Trade effettuato con successo! Profitto: \$${profit.toStringAsFixed(2)}");
        hasPurchased =
            false; // Resetta il flag di acquisto per future simulazioni
        purchaseQuantity = 0; // Resetta il valore di purchaseQuantity
      }
    }
  }
}
>>> ./models/coin_model.dart
// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:binance_spot/binance_spot.dart';

class CoinModel {
  final String symbol;
  final double qty;

  CoinModel({
    required this.symbol,
    required this.qty,
  });
}


